// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace PhoneNumbers {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public static partial class Phonemetadata {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static Phonemetadata() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public sealed partial class NumberFormat : pb::GeneratedMessageLite<NumberFormat, NumberFormat.Builder> {
    private static readonly NumberFormat defaultInstance = new Builder().BuildPartial();
    public static NumberFormat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NumberFormat DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override NumberFormat ThisMessage {
      get { return this; }
    }
    
    public const int PatternFieldNumber = 1;
    private bool hasPattern;
    private string pattern_ = "";
    public bool HasPattern {
      get { return hasPattern; }
    }
    public string Pattern {
      get { return pattern_; }
    }
    
    public const int FormatFieldNumber = 2;
    private bool hasFormat;
    private string format_ = "";
    public bool HasFormat {
      get { return hasFormat; }
    }
    public string Format {
      get { return format_; }
    }
    
    public const int LeadingDigitsPatternFieldNumber = 3;
    private pbc::PopsicleList<string> leadingDigitsPattern_ = new pbc::PopsicleList<string>();
    public scg::IList<string> LeadingDigitsPatternList {
      get { return pbc::Lists.AsReadOnly(leadingDigitsPattern_); }
    }
    public int LeadingDigitsPatternCount {
      get { return leadingDigitsPattern_.Count; }
    }
    public string GetLeadingDigitsPattern(int index) {
      return leadingDigitsPattern_[index];
    }
    
    public const int NationalPrefixFormattingRuleFieldNumber = 4;
    private bool hasNationalPrefixFormattingRule;
    private string nationalPrefixFormattingRule_ = "";
    public bool HasNationalPrefixFormattingRule {
      get { return hasNationalPrefixFormattingRule; }
    }
    public string NationalPrefixFormattingRule {
      get { return nationalPrefixFormattingRule_; }
    }
    
    public const int NationalPrefixOptionalWhenFormattingFieldNumber = 6;
    private bool hasNationalPrefixOptionalWhenFormatting;
    private bool nationalPrefixOptionalWhenFormatting_ = false;
    public bool HasNationalPrefixOptionalWhenFormatting {
      get { return hasNationalPrefixOptionalWhenFormatting; }
    }
    public bool NationalPrefixOptionalWhenFormatting {
      get { return nationalPrefixOptionalWhenFormatting_; }
    }
    
    public const int DomesticCarrierCodeFormattingRuleFieldNumber = 5;
    private bool hasDomesticCarrierCodeFormattingRule;
    private string domesticCarrierCodeFormattingRule_ = "";
    public bool HasDomesticCarrierCodeFormattingRule {
      get { return hasDomesticCarrierCodeFormattingRule; }
    }
    public string DomesticCarrierCodeFormattingRule {
      get { return domesticCarrierCodeFormattingRule_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPattern) return false;
        if (!hasFormat) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasPattern) {
        output.WriteString(1, Pattern);
      }
      if (HasFormat) {
        output.WriteString(2, Format);
      }
      if (leadingDigitsPattern_.Count > 0) {
        foreach (string element in leadingDigitsPattern_) {
          output.WriteString(3, element);
        }
      }
      if (HasNationalPrefixFormattingRule) {
        output.WriteString(4, NationalPrefixFormattingRule);
      }
      if (HasDomesticCarrierCodeFormattingRule) {
        output.WriteString(5, DomesticCarrierCodeFormattingRule);
      }
      if (HasNationalPrefixOptionalWhenFormatting) {
        output.WriteBool(6, NationalPrefixOptionalWhenFormatting);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasPattern) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Pattern);
        }
        if (HasFormat) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Format);
        }
        {
          int dataSize = 0;
          foreach (string element in LeadingDigitsPatternList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * leadingDigitsPattern_.Count;
        }
        if (HasNationalPrefixFormattingRule) {
          size += pb::CodedOutputStream.ComputeStringSize(4, NationalPrefixFormattingRule);
        }
        if (HasNationalPrefixOptionalWhenFormatting) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, NationalPrefixOptionalWhenFormatting);
        }
        if (HasDomesticCarrierCodeFormattingRule) {
          size += pb::CodedOutputStream.ComputeStringSize(5, DomesticCarrierCodeFormattingRule);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasPattern) hash ^= pattern_.GetHashCode();
      if (hasFormat) hash ^= format_.GetHashCode();
      foreach(string i in leadingDigitsPattern_)
        hash ^= i.GetHashCode();
      if (hasNationalPrefixFormattingRule) hash ^= nationalPrefixFormattingRule_.GetHashCode();
      if (hasNationalPrefixOptionalWhenFormatting) hash ^= nationalPrefixOptionalWhenFormatting_.GetHashCode();
      if (hasDomesticCarrierCodeFormattingRule) hash ^= domesticCarrierCodeFormattingRule_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      NumberFormat other = obj as NumberFormat;
      if (other == null) return false;
      if (hasPattern != other.hasPattern || (hasPattern && !pattern_.Equals(other.pattern_))) return false;
      if (hasFormat != other.hasFormat || (hasFormat && !format_.Equals(other.format_))) return false;
      if(leadingDigitsPattern_.Count != other.leadingDigitsPattern_.Count) return false;
      for(int ix=0; ix < leadingDigitsPattern_.Count; ix++)
        if(!leadingDigitsPattern_[ix].Equals(other.leadingDigitsPattern_[ix])) return false;
      if (hasNationalPrefixFormattingRule != other.hasNationalPrefixFormattingRule || (hasNationalPrefixFormattingRule && !nationalPrefixFormattingRule_.Equals(other.nationalPrefixFormattingRule_))) return false;
      if (hasNationalPrefixOptionalWhenFormatting != other.hasNationalPrefixOptionalWhenFormatting || (hasNationalPrefixOptionalWhenFormatting && !nationalPrefixOptionalWhenFormatting_.Equals(other.nationalPrefixOptionalWhenFormatting_))) return false;
      if (hasDomesticCarrierCodeFormattingRule != other.hasDomesticCarrierCodeFormattingRule || (hasDomesticCarrierCodeFormattingRule && !domesticCarrierCodeFormattingRule_.Equals(other.domesticCarrierCodeFormattingRule_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("pattern", hasPattern, pattern_, writer);
      PrintField("format", hasFormat, format_, writer);
      PrintField("leading_digits_pattern", leadingDigitsPattern_, writer);
      PrintField("national_prefix_formatting_rule", hasNationalPrefixFormattingRule, nationalPrefixFormattingRule_, writer);
      PrintField("domestic_carrier_code_formatting_rule", hasDomesticCarrierCodeFormattingRule, domesticCarrierCodeFormattingRule_, writer);
      PrintField("national_prefix_optional_when_formatting", hasNationalPrefixOptionalWhenFormatting, nationalPrefixOptionalWhenFormatting_, writer);
    }
    #endregion
    
    public static NumberFormat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NumberFormat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NumberFormat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NumberFormat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NumberFormat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NumberFormat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NumberFormat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NumberFormat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NumberFormat ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NumberFormat ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NumberFormat prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<NumberFormat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      NumberFormat result = new NumberFormat();
      
      protected override NumberFormat MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new NumberFormat();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override NumberFormat DefaultInstanceForType {
        get { return global::PhoneNumbers.NumberFormat.DefaultInstance; }
      }
      
      public override NumberFormat BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.leadingDigitsPattern_.MakeReadOnly();
        NumberFormat returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is NumberFormat) {
          return MergeFrom((NumberFormat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NumberFormat other) {
        if (other == global::PhoneNumbers.NumberFormat.DefaultInstance) return this;
        if (other.HasPattern) {
          Pattern = other.Pattern;
        }
        if (other.HasFormat) {
          Format = other.Format;
        }
        if (other.leadingDigitsPattern_.Count != 0) {
          base.AddRange(other.leadingDigitsPattern_, result.leadingDigitsPattern_);
        }
        if (other.HasNationalPrefixFormattingRule) {
          NationalPrefixFormattingRule = other.NationalPrefixFormattingRule;
        }
        if (other.HasNationalPrefixOptionalWhenFormatting) {
          NationalPrefixOptionalWhenFormatting = other.NationalPrefixOptionalWhenFormatting;
        }
        if (other.HasDomesticCarrierCodeFormattingRule) {
          DomesticCarrierCodeFormattingRule = other.DomesticCarrierCodeFormattingRule;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 10: {
              Pattern = input.ReadString();
              break;
            }
            case 18: {
              Format = input.ReadString();
              break;
            }
            case 26: {
              AddLeadingDigitsPattern(input.ReadString());
              break;
            }
            case 34: {
              NationalPrefixFormattingRule = input.ReadString();
              break;
            }
            case 42: {
              DomesticCarrierCodeFormattingRule = input.ReadString();
              break;
            }
            case 48: {
              NationalPrefixOptionalWhenFormatting = input.ReadBool();
              break;
            }
          }
        }
      }
      
      
      public bool HasPattern {
        get { return result.HasPattern; }
      }
      public string Pattern {
        get { return result.Pattern; }
        set { SetPattern(value); }
      }
      public Builder SetPattern(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPattern = true;
        result.pattern_ = value;
        return this;
      }
      public Builder ClearPattern() {
        result.hasPattern = false;
        result.pattern_ = "";
        return this;
      }
      
      public bool HasFormat {
        get { return result.HasFormat; }
      }
      public string Format {
        get { return result.Format; }
        set { SetFormat(value); }
      }
      public Builder SetFormat(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasFormat = true;
        result.format_ = value;
        return this;
      }
      public Builder ClearFormat() {
        result.hasFormat = false;
        result.format_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> LeadingDigitsPatternList {
        get { return result.leadingDigitsPattern_; }
      }
      public int LeadingDigitsPatternCount {
        get { return result.LeadingDigitsPatternCount; }
      }
      public string GetLeadingDigitsPattern(int index) {
        return result.GetLeadingDigitsPattern(index);
      }
      public Builder SetLeadingDigitsPattern(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.leadingDigitsPattern_[index] = value;
        return this;
      }
      public Builder AddLeadingDigitsPattern(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.leadingDigitsPattern_.Add(value);
        return this;
      }
      public Builder AddRangeLeadingDigitsPattern(scg::IEnumerable<string> values) {
        base.AddRange(values, result.leadingDigitsPattern_);
        return this;
      }
      public Builder ClearLeadingDigitsPattern() {
        result.leadingDigitsPattern_.Clear();
        return this;
      }
      
      public bool HasNationalPrefixFormattingRule {
        get { return result.HasNationalPrefixFormattingRule; }
      }
      public string NationalPrefixFormattingRule {
        get { return result.NationalPrefixFormattingRule; }
        set { SetNationalPrefixFormattingRule(value); }
      }
      public Builder SetNationalPrefixFormattingRule(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasNationalPrefixFormattingRule = true;
        result.nationalPrefixFormattingRule_ = value;
        return this;
      }
      public Builder ClearNationalPrefixFormattingRule() {
        result.hasNationalPrefixFormattingRule = false;
        result.nationalPrefixFormattingRule_ = "";
        return this;
      }
      
      public bool HasNationalPrefixOptionalWhenFormatting {
        get { return result.HasNationalPrefixOptionalWhenFormatting; }
      }
      public bool NationalPrefixOptionalWhenFormatting {
        get { return result.NationalPrefixOptionalWhenFormatting; }
        set { SetNationalPrefixOptionalWhenFormatting(value); }
      }
      public Builder SetNationalPrefixOptionalWhenFormatting(bool value) {
        result.hasNationalPrefixOptionalWhenFormatting = true;
        result.nationalPrefixOptionalWhenFormatting_ = value;
        return this;
      }
      public Builder ClearNationalPrefixOptionalWhenFormatting() {
        result.hasNationalPrefixOptionalWhenFormatting = false;
        result.nationalPrefixOptionalWhenFormatting_ = false;
        return this;
      }
      
      public bool HasDomesticCarrierCodeFormattingRule {
        get { return result.HasDomesticCarrierCodeFormattingRule; }
      }
      public string DomesticCarrierCodeFormattingRule {
        get { return result.DomesticCarrierCodeFormattingRule; }
        set { SetDomesticCarrierCodeFormattingRule(value); }
      }
      public Builder SetDomesticCarrierCodeFormattingRule(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasDomesticCarrierCodeFormattingRule = true;
        result.domesticCarrierCodeFormattingRule_ = value;
        return this;
      }
      public Builder ClearDomesticCarrierCodeFormattingRule() {
        result.hasDomesticCarrierCodeFormattingRule = false;
        result.domesticCarrierCodeFormattingRule_ = "";
        return this;
      }
    }
    static NumberFormat() {
      object.ReferenceEquals(global::PhoneNumbers.Phonemetadata.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public sealed partial class PhoneNumberDesc : pb::GeneratedMessageLite<PhoneNumberDesc, PhoneNumberDesc.Builder> {
    private static readonly PhoneNumberDesc defaultInstance = new Builder().BuildPartial();
    public static PhoneNumberDesc DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PhoneNumberDesc DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override PhoneNumberDesc ThisMessage {
      get { return this; }
    }
    
    public const int NationalNumberPatternFieldNumber = 2;
    private bool hasNationalNumberPattern;
    private string nationalNumberPattern_ = "";
    public bool HasNationalNumberPattern {
      get { return hasNationalNumberPattern; }
    }
    public string NationalNumberPattern {
      get { return nationalNumberPattern_; }
    }
    
    public const int PossibleNumberPatternFieldNumber = 3;
    private bool hasPossibleNumberPattern;
    private string possibleNumberPattern_ = "";
    public bool HasPossibleNumberPattern {
      get { return hasPossibleNumberPattern; }
    }
    public string PossibleNumberPattern {
      get { return possibleNumberPattern_; }
    }
    
    public const int ExampleNumberFieldNumber = 6;
    private bool hasExampleNumber;
    private string exampleNumber_ = "";
    public bool HasExampleNumber {
      get { return hasExampleNumber; }
    }
    public string ExampleNumber {
      get { return exampleNumber_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasNationalNumberPattern) {
        output.WriteString(2, NationalNumberPattern);
      }
      if (HasPossibleNumberPattern) {
        output.WriteString(3, PossibleNumberPattern);
      }
      if (HasExampleNumber) {
        output.WriteString(6, ExampleNumber);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasNationalNumberPattern) {
          size += pb::CodedOutputStream.ComputeStringSize(2, NationalNumberPattern);
        }
        if (HasPossibleNumberPattern) {
          size += pb::CodedOutputStream.ComputeStringSize(3, PossibleNumberPattern);
        }
        if (HasExampleNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ExampleNumber);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasNationalNumberPattern) hash ^= nationalNumberPattern_.GetHashCode();
      if (hasPossibleNumberPattern) hash ^= possibleNumberPattern_.GetHashCode();
      if (hasExampleNumber) hash ^= exampleNumber_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PhoneNumberDesc other = obj as PhoneNumberDesc;
      if (other == null) return false;
      if (hasNationalNumberPattern != other.hasNationalNumberPattern || (hasNationalNumberPattern && !nationalNumberPattern_.Equals(other.nationalNumberPattern_))) return false;
      if (hasPossibleNumberPattern != other.hasPossibleNumberPattern || (hasPossibleNumberPattern && !possibleNumberPattern_.Equals(other.possibleNumberPattern_))) return false;
      if (hasExampleNumber != other.hasExampleNumber || (hasExampleNumber && !exampleNumber_.Equals(other.exampleNumber_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("national_number_pattern", hasNationalNumberPattern, nationalNumberPattern_, writer);
      PrintField("possible_number_pattern", hasPossibleNumberPattern, possibleNumberPattern_, writer);
      PrintField("example_number", hasExampleNumber, exampleNumber_, writer);
    }
    #endregion
    
    public static PhoneNumberDesc ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PhoneNumberDesc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PhoneNumberDesc ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PhoneNumberDesc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PhoneNumberDesc ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PhoneNumberDesc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PhoneNumberDesc ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PhoneNumberDesc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PhoneNumberDesc ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PhoneNumberDesc ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PhoneNumberDesc prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<PhoneNumberDesc, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      PhoneNumberDesc result = new PhoneNumberDesc();
      
      protected override PhoneNumberDesc MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new PhoneNumberDesc();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override PhoneNumberDesc DefaultInstanceForType {
        get { return global::PhoneNumbers.PhoneNumberDesc.DefaultInstance; }
      }
      
      public override PhoneNumberDesc BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        PhoneNumberDesc returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PhoneNumberDesc) {
          return MergeFrom((PhoneNumberDesc) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PhoneNumberDesc other) {
        if (other == global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) return this;
        if (other.HasNationalNumberPattern) {
          NationalNumberPattern = other.NationalNumberPattern;
        }
        if (other.HasPossibleNumberPattern) {
          PossibleNumberPattern = other.PossibleNumberPattern;
        }
        if (other.HasExampleNumber) {
          ExampleNumber = other.ExampleNumber;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 18: {
              NationalNumberPattern = input.ReadString();
              break;
            }
            case 26: {
              PossibleNumberPattern = input.ReadString();
              break;
            }
            case 50: {
              ExampleNumber = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasNationalNumberPattern {
        get { return result.HasNationalNumberPattern; }
      }
      public string NationalNumberPattern {
        get { return result.NationalNumberPattern; }
        set { SetNationalNumberPattern(value); }
      }
      public Builder SetNationalNumberPattern(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasNationalNumberPattern = true;
        result.nationalNumberPattern_ = value;
        return this;
      }
      public Builder ClearNationalNumberPattern() {
        result.hasNationalNumberPattern = false;
        result.nationalNumberPattern_ = "";
        return this;
      }
      
      public bool HasPossibleNumberPattern {
        get { return result.HasPossibleNumberPattern; }
      }
      public string PossibleNumberPattern {
        get { return result.PossibleNumberPattern; }
        set { SetPossibleNumberPattern(value); }
      }
      public Builder SetPossibleNumberPattern(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPossibleNumberPattern = true;
        result.possibleNumberPattern_ = value;
        return this;
      }
      public Builder ClearPossibleNumberPattern() {
        result.hasPossibleNumberPattern = false;
        result.possibleNumberPattern_ = "";
        return this;
      }
      
      public bool HasExampleNumber {
        get { return result.HasExampleNumber; }
      }
      public string ExampleNumber {
        get { return result.ExampleNumber; }
        set { SetExampleNumber(value); }
      }
      public Builder SetExampleNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasExampleNumber = true;
        result.exampleNumber_ = value;
        return this;
      }
      public Builder ClearExampleNumber() {
        result.hasExampleNumber = false;
        result.exampleNumber_ = "";
        return this;
      }
    }
    static PhoneNumberDesc() {
      object.ReferenceEquals(global::PhoneNumbers.Phonemetadata.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public sealed partial class PhoneMetadata : pb::GeneratedMessageLite<PhoneMetadata, PhoneMetadata.Builder> {
    private static readonly PhoneMetadata defaultInstance = new Builder().BuildPartial();
    public static PhoneMetadata DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PhoneMetadata DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override PhoneMetadata ThisMessage {
      get { return this; }
    }
    
    public const int GeneralDescFieldNumber = 1;
    private bool hasGeneralDesc;
    private global::PhoneNumbers.PhoneNumberDesc generalDesc_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasGeneralDesc {
      get { return hasGeneralDesc; }
    }
    public global::PhoneNumbers.PhoneNumberDesc GeneralDesc {
      get { return generalDesc_; }
    }
    
    public const int FixedLineFieldNumber = 2;
    private bool hasFixedLine;
    private global::PhoneNumbers.PhoneNumberDesc fixedLine_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasFixedLine {
      get { return hasFixedLine; }
    }
    public global::PhoneNumbers.PhoneNumberDesc FixedLine {
      get { return fixedLine_; }
    }
    
    public const int MobileFieldNumber = 3;
    private bool hasMobile;
    private global::PhoneNumbers.PhoneNumberDesc mobile_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasMobile {
      get { return hasMobile; }
    }
    public global::PhoneNumbers.PhoneNumberDesc Mobile {
      get { return mobile_; }
    }
    
    public const int TollFreeFieldNumber = 4;
    private bool hasTollFree;
    private global::PhoneNumbers.PhoneNumberDesc tollFree_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasTollFree {
      get { return hasTollFree; }
    }
    public global::PhoneNumbers.PhoneNumberDesc TollFree {
      get { return tollFree_; }
    }
    
    public const int PremiumRateFieldNumber = 5;
    private bool hasPremiumRate;
    private global::PhoneNumbers.PhoneNumberDesc premiumRate_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasPremiumRate {
      get { return hasPremiumRate; }
    }
    public global::PhoneNumbers.PhoneNumberDesc PremiumRate {
      get { return premiumRate_; }
    }
    
    public const int SharedCostFieldNumber = 6;
    private bool hasSharedCost;
    private global::PhoneNumbers.PhoneNumberDesc sharedCost_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasSharedCost {
      get { return hasSharedCost; }
    }
    public global::PhoneNumbers.PhoneNumberDesc SharedCost {
      get { return sharedCost_; }
    }
    
    public const int PersonalNumberFieldNumber = 7;
    private bool hasPersonalNumber;
    private global::PhoneNumbers.PhoneNumberDesc personalNumber_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasPersonalNumber {
      get { return hasPersonalNumber; }
    }
    public global::PhoneNumbers.PhoneNumberDesc PersonalNumber {
      get { return personalNumber_; }
    }
    
    public const int VoipFieldNumber = 8;
    private bool hasVoip;
    private global::PhoneNumbers.PhoneNumberDesc voip_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasVoip {
      get { return hasVoip; }
    }
    public global::PhoneNumbers.PhoneNumberDesc Voip {
      get { return voip_; }
    }
    
    public const int PagerFieldNumber = 21;
    private bool hasPager;
    private global::PhoneNumbers.PhoneNumberDesc pager_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasPager {
      get { return hasPager; }
    }
    public global::PhoneNumbers.PhoneNumberDesc Pager {
      get { return pager_; }
    }
    
    public const int UanFieldNumber = 25;
    private bool hasUan;
    private global::PhoneNumbers.PhoneNumberDesc uan_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasUan {
      get { return hasUan; }
    }
    public global::PhoneNumbers.PhoneNumberDesc Uan {
      get { return uan_; }
    }
    
    public const int EmergencyFieldNumber = 27;
    private bool hasEmergency;
    private global::PhoneNumbers.PhoneNumberDesc emergency_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasEmergency {
      get { return hasEmergency; }
    }
    public global::PhoneNumbers.PhoneNumberDesc Emergency {
      get { return emergency_; }
    }
    
    public const int VoicemailFieldNumber = 28;
    private bool hasVoicemail;
    private global::PhoneNumbers.PhoneNumberDesc voicemail_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasVoicemail {
      get { return hasVoicemail; }
    }
    public global::PhoneNumbers.PhoneNumberDesc Voicemail {
      get { return voicemail_; }
    }
    
    public const int NoInternationalDiallingFieldNumber = 24;
    private bool hasNoInternationalDialling;
    private global::PhoneNumbers.PhoneNumberDesc noInternationalDialling_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
    public bool HasNoInternationalDialling {
      get { return hasNoInternationalDialling; }
    }
    public global::PhoneNumbers.PhoneNumberDesc NoInternationalDialling {
      get { return noInternationalDialling_; }
    }
    
    public const int IdFieldNumber = 9;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int CountryCodeFieldNumber = 10;
    private bool hasCountryCode;
    private int countryCode_ = 0;
    public bool HasCountryCode {
      get { return hasCountryCode; }
    }
    public int CountryCode {
      get { return countryCode_; }
    }
    
    public const int InternationalPrefixFieldNumber = 11;
    private bool hasInternationalPrefix;
    private string internationalPrefix_ = "";
    public bool HasInternationalPrefix {
      get { return hasInternationalPrefix; }
    }
    public string InternationalPrefix {
      get { return internationalPrefix_; }
    }
    
    public const int PreferredInternationalPrefixFieldNumber = 17;
    private bool hasPreferredInternationalPrefix;
    private string preferredInternationalPrefix_ = "";
    public bool HasPreferredInternationalPrefix {
      get { return hasPreferredInternationalPrefix; }
    }
    public string PreferredInternationalPrefix {
      get { return preferredInternationalPrefix_; }
    }
    
    public const int NationalPrefixFieldNumber = 12;
    private bool hasNationalPrefix;
    private string nationalPrefix_ = "";
    public bool HasNationalPrefix {
      get { return hasNationalPrefix; }
    }
    public string NationalPrefix {
      get { return nationalPrefix_; }
    }
    
    public const int PreferredExtnPrefixFieldNumber = 13;
    private bool hasPreferredExtnPrefix;
    private string preferredExtnPrefix_ = "";
    public bool HasPreferredExtnPrefix {
      get { return hasPreferredExtnPrefix; }
    }
    public string PreferredExtnPrefix {
      get { return preferredExtnPrefix_; }
    }
    
    public const int NationalPrefixForParsingFieldNumber = 15;
    private bool hasNationalPrefixForParsing;
    private string nationalPrefixForParsing_ = "";
    public bool HasNationalPrefixForParsing {
      get { return hasNationalPrefixForParsing; }
    }
    public string NationalPrefixForParsing {
      get { return nationalPrefixForParsing_; }
    }
    
    public const int NationalPrefixTransformRuleFieldNumber = 16;
    private bool hasNationalPrefixTransformRule;
    private string nationalPrefixTransformRule_ = "";
    public bool HasNationalPrefixTransformRule {
      get { return hasNationalPrefixTransformRule; }
    }
    public string NationalPrefixTransformRule {
      get { return nationalPrefixTransformRule_; }
    }
    
    public const int SameMobileAndFixedLinePatternFieldNumber = 18;
    private bool hasSameMobileAndFixedLinePattern;
    private bool sameMobileAndFixedLinePattern_ = false;
    public bool HasSameMobileAndFixedLinePattern {
      get { return hasSameMobileAndFixedLinePattern; }
    }
    public bool SameMobileAndFixedLinePattern {
      get { return sameMobileAndFixedLinePattern_; }
    }
    
    public const int NumberFormatFieldNumber = 19;
    private pbc::PopsicleList<global::PhoneNumbers.NumberFormat> numberFormat_ = new pbc::PopsicleList<global::PhoneNumbers.NumberFormat>();
    public scg::IList<global::PhoneNumbers.NumberFormat> NumberFormatList {
      get { return numberFormat_; }
    }
    public int NumberFormatCount {
      get { return numberFormat_.Count; }
    }
    public global::PhoneNumbers.NumberFormat GetNumberFormat(int index) {
      return numberFormat_[index];
    }
    
    public const int IntlNumberFormatFieldNumber = 20;
    private pbc::PopsicleList<global::PhoneNumbers.NumberFormat> intlNumberFormat_ = new pbc::PopsicleList<global::PhoneNumbers.NumberFormat>();
    public scg::IList<global::PhoneNumbers.NumberFormat> IntlNumberFormatList {
      get { return intlNumberFormat_; }
    }
    public int IntlNumberFormatCount {
      get { return intlNumberFormat_.Count; }
    }
    public global::PhoneNumbers.NumberFormat GetIntlNumberFormat(int index) {
      return intlNumberFormat_[index];
    }
    
    public const int MainCountryForCodeFieldNumber = 22;
    private bool hasMainCountryForCode;
    private bool mainCountryForCode_ = false;
    public bool HasMainCountryForCode {
      get { return hasMainCountryForCode; }
    }
    public bool MainCountryForCode {
      get { return mainCountryForCode_; }
    }
    
    public const int LeadingDigitsFieldNumber = 23;
    private bool hasLeadingDigits;
    private string leadingDigits_ = "";
    public bool HasLeadingDigits {
      get { return hasLeadingDigits; }
    }
    public string LeadingDigits {
      get { return leadingDigits_; }
    }
    
    public const int LeadingZeroPossibleFieldNumber = 26;
    private bool hasLeadingZeroPossible;
    private bool leadingZeroPossible_ = false;
    public bool HasLeadingZeroPossible {
      get { return hasLeadingZeroPossible; }
    }
    public bool LeadingZeroPossible {
      get { return leadingZeroPossible_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGeneralDesc) return false;
        if (!hasFixedLine) return false;
        if (!hasMobile) return false;
        if (!hasTollFree) return false;
        if (!hasPremiumRate) return false;
        if (!hasSharedCost) return false;
        if (!hasPersonalNumber) return false;
        if (!hasVoip) return false;
        if (!hasPager) return false;
        if (!hasUan) return false;
        if (!hasEmergency) return false;
        if (!hasVoicemail) return false;
        if (!hasNoInternationalDialling) return false;
        if (!hasId) return false;
        if (!hasCountryCode) return false;
        if (!hasInternationalPrefix) return false;
        foreach (global::PhoneNumbers.NumberFormat element in NumberFormatList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::PhoneNumbers.NumberFormat element in IntlNumberFormatList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      if (HasGeneralDesc) {
        output.WriteMessage(1, GeneralDesc);
      }
      if (HasFixedLine) {
        output.WriteMessage(2, FixedLine);
      }
      if (HasMobile) {
        output.WriteMessage(3, Mobile);
      }
      if (HasTollFree) {
        output.WriteMessage(4, TollFree);
      }
      if (HasPremiumRate) {
        output.WriteMessage(5, PremiumRate);
      }
      if (HasSharedCost) {
        output.WriteMessage(6, SharedCost);
      }
      if (HasPersonalNumber) {
        output.WriteMessage(7, PersonalNumber);
      }
      if (HasVoip) {
        output.WriteMessage(8, Voip);
      }
      if (HasId) {
        output.WriteString(9, Id);
      }
      if (HasCountryCode) {
        output.WriteInt32(10, CountryCode);
      }
      if (HasInternationalPrefix) {
        output.WriteString(11, InternationalPrefix);
      }
      if (HasNationalPrefix) {
        output.WriteString(12, NationalPrefix);
      }
      if (HasPreferredExtnPrefix) {
        output.WriteString(13, PreferredExtnPrefix);
      }
      if (HasNationalPrefixForParsing) {
        output.WriteString(15, NationalPrefixForParsing);
      }
      if (HasNationalPrefixTransformRule) {
        output.WriteString(16, NationalPrefixTransformRule);
      }
      if (HasPreferredInternationalPrefix) {
        output.WriteString(17, PreferredInternationalPrefix);
      }
      if (HasSameMobileAndFixedLinePattern) {
        output.WriteBool(18, SameMobileAndFixedLinePattern);
      }
      foreach (global::PhoneNumbers.NumberFormat element in NumberFormatList) {
        output.WriteMessage(19, element);
      }
      foreach (global::PhoneNumbers.NumberFormat element in IntlNumberFormatList) {
        output.WriteMessage(20, element);
      }
      if (HasPager) {
        output.WriteMessage(21, Pager);
      }
      if (HasMainCountryForCode) {
        output.WriteBool(22, MainCountryForCode);
      }
      if (HasLeadingDigits) {
        output.WriteString(23, LeadingDigits);
      }
      if (HasNoInternationalDialling) {
        output.WriteMessage(24, NoInternationalDialling);
      }
      if (HasUan) {
        output.WriteMessage(25, Uan);
      }
      if (HasLeadingZeroPossible) {
        output.WriteBool(26, LeadingZeroPossible);
      }
      if (HasEmergency) {
        output.WriteMessage(27, Emergency);
      }
      if (HasVoicemail) {
        output.WriteMessage(28, Voicemail);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasGeneralDesc) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, GeneralDesc);
        }
        if (HasFixedLine) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, FixedLine);
        }
        if (HasMobile) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Mobile);
        }
        if (HasTollFree) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, TollFree);
        }
        if (HasPremiumRate) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, PremiumRate);
        }
        if (HasSharedCost) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, SharedCost);
        }
        if (HasPersonalNumber) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, PersonalNumber);
        }
        if (HasVoip) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Voip);
        }
        if (HasPager) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, Pager);
        }
        if (HasUan) {
          size += pb::CodedOutputStream.ComputeMessageSize(25, Uan);
        }
        if (HasEmergency) {
          size += pb::CodedOutputStream.ComputeMessageSize(27, Emergency);
        }
        if (HasVoicemail) {
          size += pb::CodedOutputStream.ComputeMessageSize(28, Voicemail);
        }
        if (HasNoInternationalDialling) {
          size += pb::CodedOutputStream.ComputeMessageSize(24, NoInternationalDialling);
        }
        if (HasId) {
          size += pb::CodedOutputStream.ComputeStringSize(9, Id);
        }
        if (HasCountryCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, CountryCode);
        }
        if (HasInternationalPrefix) {
          size += pb::CodedOutputStream.ComputeStringSize(11, InternationalPrefix);
        }
        if (HasPreferredInternationalPrefix) {
          size += pb::CodedOutputStream.ComputeStringSize(17, PreferredInternationalPrefix);
        }
        if (HasNationalPrefix) {
          size += pb::CodedOutputStream.ComputeStringSize(12, NationalPrefix);
        }
        if (HasPreferredExtnPrefix) {
          size += pb::CodedOutputStream.ComputeStringSize(13, PreferredExtnPrefix);
        }
        if (HasNationalPrefixForParsing) {
          size += pb::CodedOutputStream.ComputeStringSize(15, NationalPrefixForParsing);
        }
        if (HasNationalPrefixTransformRule) {
          size += pb::CodedOutputStream.ComputeStringSize(16, NationalPrefixTransformRule);
        }
        if (HasSameMobileAndFixedLinePattern) {
          size += pb::CodedOutputStream.ComputeBoolSize(18, SameMobileAndFixedLinePattern);
        }
        foreach (global::PhoneNumbers.NumberFormat element in NumberFormatList) {
          size += pb::CodedOutputStream.ComputeMessageSize(19, element);
        }
        foreach (global::PhoneNumbers.NumberFormat element in IntlNumberFormatList) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, element);
        }
        if (HasMainCountryForCode) {
          size += pb::CodedOutputStream.ComputeBoolSize(22, MainCountryForCode);
        }
        if (HasLeadingDigits) {
          size += pb::CodedOutputStream.ComputeStringSize(23, LeadingDigits);
        }
        if (HasLeadingZeroPossible) {
          size += pb::CodedOutputStream.ComputeBoolSize(26, LeadingZeroPossible);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasGeneralDesc) hash ^= generalDesc_.GetHashCode();
      if (hasFixedLine) hash ^= fixedLine_.GetHashCode();
      if (hasMobile) hash ^= mobile_.GetHashCode();
      if (hasTollFree) hash ^= tollFree_.GetHashCode();
      if (hasPremiumRate) hash ^= premiumRate_.GetHashCode();
      if (hasSharedCost) hash ^= sharedCost_.GetHashCode();
      if (hasPersonalNumber) hash ^= personalNumber_.GetHashCode();
      if (hasVoip) hash ^= voip_.GetHashCode();
      if (hasPager) hash ^= pager_.GetHashCode();
      if (hasUan) hash ^= uan_.GetHashCode();
      if (hasEmergency) hash ^= emergency_.GetHashCode();
      if (hasVoicemail) hash ^= voicemail_.GetHashCode();
      if (hasNoInternationalDialling) hash ^= noInternationalDialling_.GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasCountryCode) hash ^= countryCode_.GetHashCode();
      if (hasInternationalPrefix) hash ^= internationalPrefix_.GetHashCode();
      if (hasPreferredInternationalPrefix) hash ^= preferredInternationalPrefix_.GetHashCode();
      if (hasNationalPrefix) hash ^= nationalPrefix_.GetHashCode();
      if (hasPreferredExtnPrefix) hash ^= preferredExtnPrefix_.GetHashCode();
      if (hasNationalPrefixForParsing) hash ^= nationalPrefixForParsing_.GetHashCode();
      if (hasNationalPrefixTransformRule) hash ^= nationalPrefixTransformRule_.GetHashCode();
      if (hasSameMobileAndFixedLinePattern) hash ^= sameMobileAndFixedLinePattern_.GetHashCode();
      foreach(global::PhoneNumbers.NumberFormat i in numberFormat_)
        hash ^= i.GetHashCode();
      foreach(global::PhoneNumbers.NumberFormat i in intlNumberFormat_)
        hash ^= i.GetHashCode();
      if (hasMainCountryForCode) hash ^= mainCountryForCode_.GetHashCode();
      if (hasLeadingDigits) hash ^= leadingDigits_.GetHashCode();
      if (hasLeadingZeroPossible) hash ^= leadingZeroPossible_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PhoneMetadata other = obj as PhoneMetadata;
      if (other == null) return false;
      if (hasGeneralDesc != other.hasGeneralDesc || (hasGeneralDesc && !generalDesc_.Equals(other.generalDesc_))) return false;
      if (hasFixedLine != other.hasFixedLine || (hasFixedLine && !fixedLine_.Equals(other.fixedLine_))) return false;
      if (hasMobile != other.hasMobile || (hasMobile && !mobile_.Equals(other.mobile_))) return false;
      if (hasTollFree != other.hasTollFree || (hasTollFree && !tollFree_.Equals(other.tollFree_))) return false;
      if (hasPremiumRate != other.hasPremiumRate || (hasPremiumRate && !premiumRate_.Equals(other.premiumRate_))) return false;
      if (hasSharedCost != other.hasSharedCost || (hasSharedCost && !sharedCost_.Equals(other.sharedCost_))) return false;
      if (hasPersonalNumber != other.hasPersonalNumber || (hasPersonalNumber && !personalNumber_.Equals(other.personalNumber_))) return false;
      if (hasVoip != other.hasVoip || (hasVoip && !voip_.Equals(other.voip_))) return false;
      if (hasPager != other.hasPager || (hasPager && !pager_.Equals(other.pager_))) return false;
      if (hasUan != other.hasUan || (hasUan && !uan_.Equals(other.uan_))) return false;
      if (hasEmergency != other.hasEmergency || (hasEmergency && !emergency_.Equals(other.emergency_))) return false;
      if (hasVoicemail != other.hasVoicemail || (hasVoicemail && !voicemail_.Equals(other.voicemail_))) return false;
      if (hasNoInternationalDialling != other.hasNoInternationalDialling || (hasNoInternationalDialling && !noInternationalDialling_.Equals(other.noInternationalDialling_))) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasCountryCode != other.hasCountryCode || (hasCountryCode && !countryCode_.Equals(other.countryCode_))) return false;
      if (hasInternationalPrefix != other.hasInternationalPrefix || (hasInternationalPrefix && !internationalPrefix_.Equals(other.internationalPrefix_))) return false;
      if (hasPreferredInternationalPrefix != other.hasPreferredInternationalPrefix || (hasPreferredInternationalPrefix && !preferredInternationalPrefix_.Equals(other.preferredInternationalPrefix_))) return false;
      if (hasNationalPrefix != other.hasNationalPrefix || (hasNationalPrefix && !nationalPrefix_.Equals(other.nationalPrefix_))) return false;
      if (hasPreferredExtnPrefix != other.hasPreferredExtnPrefix || (hasPreferredExtnPrefix && !preferredExtnPrefix_.Equals(other.preferredExtnPrefix_))) return false;
      if (hasNationalPrefixForParsing != other.hasNationalPrefixForParsing || (hasNationalPrefixForParsing && !nationalPrefixForParsing_.Equals(other.nationalPrefixForParsing_))) return false;
      if (hasNationalPrefixTransformRule != other.hasNationalPrefixTransformRule || (hasNationalPrefixTransformRule && !nationalPrefixTransformRule_.Equals(other.nationalPrefixTransformRule_))) return false;
      if (hasSameMobileAndFixedLinePattern != other.hasSameMobileAndFixedLinePattern || (hasSameMobileAndFixedLinePattern && !sameMobileAndFixedLinePattern_.Equals(other.sameMobileAndFixedLinePattern_))) return false;
      if(numberFormat_.Count != other.numberFormat_.Count) return false;
      for(int ix=0; ix < numberFormat_.Count; ix++)
        if(!numberFormat_[ix].Equals(other.numberFormat_[ix])) return false;
      if(intlNumberFormat_.Count != other.intlNumberFormat_.Count) return false;
      for(int ix=0; ix < intlNumberFormat_.Count; ix++)
        if(!intlNumberFormat_[ix].Equals(other.intlNumberFormat_[ix])) return false;
      if (hasMainCountryForCode != other.hasMainCountryForCode || (hasMainCountryForCode && !mainCountryForCode_.Equals(other.mainCountryForCode_))) return false;
      if (hasLeadingDigits != other.hasLeadingDigits || (hasLeadingDigits && !leadingDigits_.Equals(other.leadingDigits_))) return false;
      if (hasLeadingZeroPossible != other.hasLeadingZeroPossible || (hasLeadingZeroPossible && !leadingZeroPossible_.Equals(other.leadingZeroPossible_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("general_desc", hasGeneralDesc, generalDesc_, writer);
      PrintField("fixed_line", hasFixedLine, fixedLine_, writer);
      PrintField("mobile", hasMobile, mobile_, writer);
      PrintField("toll_free", hasTollFree, tollFree_, writer);
      PrintField("premium_rate", hasPremiumRate, premiumRate_, writer);
      PrintField("shared_cost", hasSharedCost, sharedCost_, writer);
      PrintField("personal_number", hasPersonalNumber, personalNumber_, writer);
      PrintField("voip", hasVoip, voip_, writer);
      PrintField("id", hasId, id_, writer);
      PrintField("country_code", hasCountryCode, countryCode_, writer);
      PrintField("international_prefix", hasInternationalPrefix, internationalPrefix_, writer);
      PrintField("national_prefix", hasNationalPrefix, nationalPrefix_, writer);
      PrintField("preferred_extn_prefix", hasPreferredExtnPrefix, preferredExtnPrefix_, writer);
      PrintField("national_prefix_for_parsing", hasNationalPrefixForParsing, nationalPrefixForParsing_, writer);
      PrintField("national_prefix_transform_rule", hasNationalPrefixTransformRule, nationalPrefixTransformRule_, writer);
      PrintField("preferred_international_prefix", hasPreferredInternationalPrefix, preferredInternationalPrefix_, writer);
      PrintField("same_mobile_and_fixed_line_pattern", hasSameMobileAndFixedLinePattern, sameMobileAndFixedLinePattern_, writer);
      PrintField("number_format", numberFormat_, writer);
      PrintField("intl_number_format", intlNumberFormat_, writer);
      PrintField("pager", hasPager, pager_, writer);
      PrintField("main_country_for_code", hasMainCountryForCode, mainCountryForCode_, writer);
      PrintField("leading_digits", hasLeadingDigits, leadingDigits_, writer);
      PrintField("no_international_dialling", hasNoInternationalDialling, noInternationalDialling_, writer);
      PrintField("uan", hasUan, uan_, writer);
      PrintField("leading_zero_possible", hasLeadingZeroPossible, leadingZeroPossible_, writer);
      PrintField("emergency", hasEmergency, emergency_, writer);
      PrintField("voicemail", hasVoicemail, voicemail_, writer);
    }
    #endregion
    
    public static PhoneMetadata ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PhoneMetadata ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PhoneMetadata ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PhoneMetadata ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PhoneMetadata ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PhoneMetadata ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PhoneMetadata ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PhoneMetadata ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PhoneMetadata ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PhoneMetadata ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PhoneMetadata prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<PhoneMetadata, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      PhoneMetadata result = new PhoneMetadata();
      
      protected override PhoneMetadata MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new PhoneMetadata();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override PhoneMetadata DefaultInstanceForType {
        get { return global::PhoneNumbers.PhoneMetadata.DefaultInstance; }
      }
      
      public override PhoneMetadata BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.numberFormat_.MakeReadOnly();
        result.intlNumberFormat_.MakeReadOnly();
        PhoneMetadata returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PhoneMetadata) {
          return MergeFrom((PhoneMetadata) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PhoneMetadata other) {
        if (other == global::PhoneNumbers.PhoneMetadata.DefaultInstance) return this;
        if (other.HasGeneralDesc) {
          MergeGeneralDesc(other.GeneralDesc);
        }
        if (other.HasFixedLine) {
          MergeFixedLine(other.FixedLine);
        }
        if (other.HasMobile) {
          MergeMobile(other.Mobile);
        }
        if (other.HasTollFree) {
          MergeTollFree(other.TollFree);
        }
        if (other.HasPremiumRate) {
          MergePremiumRate(other.PremiumRate);
        }
        if (other.HasSharedCost) {
          MergeSharedCost(other.SharedCost);
        }
        if (other.HasPersonalNumber) {
          MergePersonalNumber(other.PersonalNumber);
        }
        if (other.HasVoip) {
          MergeVoip(other.Voip);
        }
        if (other.HasPager) {
          MergePager(other.Pager);
        }
        if (other.HasUan) {
          MergeUan(other.Uan);
        }
        if (other.HasEmergency) {
          MergeEmergency(other.Emergency);
        }
        if (other.HasVoicemail) {
          MergeVoicemail(other.Voicemail);
        }
        if (other.HasNoInternationalDialling) {
          MergeNoInternationalDialling(other.NoInternationalDialling);
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasCountryCode) {
          CountryCode = other.CountryCode;
        }
        if (other.HasInternationalPrefix) {
          InternationalPrefix = other.InternationalPrefix;
        }
        if (other.HasPreferredInternationalPrefix) {
          PreferredInternationalPrefix = other.PreferredInternationalPrefix;
        }
        if (other.HasNationalPrefix) {
          NationalPrefix = other.NationalPrefix;
        }
        if (other.HasPreferredExtnPrefix) {
          PreferredExtnPrefix = other.PreferredExtnPrefix;
        }
        if (other.HasNationalPrefixForParsing) {
          NationalPrefixForParsing = other.NationalPrefixForParsing;
        }
        if (other.HasNationalPrefixTransformRule) {
          NationalPrefixTransformRule = other.NationalPrefixTransformRule;
        }
        if (other.HasSameMobileAndFixedLinePattern) {
          SameMobileAndFixedLinePattern = other.SameMobileAndFixedLinePattern;
        }
        if (other.numberFormat_.Count != 0) {
          base.AddRange(other.numberFormat_, result.numberFormat_);
        }
        if (other.intlNumberFormat_.Count != 0) {
          base.AddRange(other.intlNumberFormat_, result.intlNumberFormat_);
        }
        if (other.HasMainCountryForCode) {
          MainCountryForCode = other.MainCountryForCode;
        }
        if (other.HasLeadingDigits) {
          LeadingDigits = other.LeadingDigits;
        }
        if (other.HasLeadingZeroPossible) {
          LeadingZeroPossible = other.LeadingZeroPossible;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasGeneralDesc) {
                subBuilder.MergeFrom(GeneralDesc);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GeneralDesc = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasFixedLine) {
                subBuilder.MergeFrom(FixedLine);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FixedLine = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasMobile) {
                subBuilder.MergeFrom(Mobile);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Mobile = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasTollFree) {
                subBuilder.MergeFrom(TollFree);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TollFree = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasPremiumRate) {
                subBuilder.MergeFrom(PremiumRate);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PremiumRate = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasSharedCost) {
                subBuilder.MergeFrom(SharedCost);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SharedCost = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasPersonalNumber) {
                subBuilder.MergeFrom(PersonalNumber);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PersonalNumber = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasVoip) {
                subBuilder.MergeFrom(Voip);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Voip = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              Id = input.ReadString();
              break;
            }
            case 80: {
              CountryCode = input.ReadInt32();
              break;
            }
            case 90: {
              InternationalPrefix = input.ReadString();
              break;
            }
            case 98: {
              NationalPrefix = input.ReadString();
              break;
            }
            case 106: {
              PreferredExtnPrefix = input.ReadString();
              break;
            }
            case 122: {
              NationalPrefixForParsing = input.ReadString();
              break;
            }
            case 130: {
              NationalPrefixTransformRule = input.ReadString();
              break;
            }
            case 138: {
              PreferredInternationalPrefix = input.ReadString();
              break;
            }
            case 144: {
              SameMobileAndFixedLinePattern = input.ReadBool();
              break;
            }
            case 154: {
              global::PhoneNumbers.NumberFormat.Builder subBuilder = global::PhoneNumbers.NumberFormat.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddNumberFormat(subBuilder.BuildPartial());
              break;
            }
            case 162: {
              global::PhoneNumbers.NumberFormat.Builder subBuilder = global::PhoneNumbers.NumberFormat.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddIntlNumberFormat(subBuilder.BuildPartial());
              break;
            }
            case 170: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasPager) {
                subBuilder.MergeFrom(Pager);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pager = subBuilder.BuildPartial();
              break;
            }
            case 176: {
              MainCountryForCode = input.ReadBool();
              break;
            }
            case 186: {
              LeadingDigits = input.ReadString();
              break;
            }
            case 194: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasNoInternationalDialling) {
                subBuilder.MergeFrom(NoInternationalDialling);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NoInternationalDialling = subBuilder.BuildPartial();
              break;
            }
            case 202: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasUan) {
                subBuilder.MergeFrom(Uan);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Uan = subBuilder.BuildPartial();
              break;
            }
            case 208: {
              LeadingZeroPossible = input.ReadBool();
              break;
            }
            case 218: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasEmergency) {
                subBuilder.MergeFrom(Emergency);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Emergency = subBuilder.BuildPartial();
              break;
            }
            case 226: {
              global::PhoneNumbers.PhoneNumberDesc.Builder subBuilder = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder();
              if (HasVoicemail) {
                subBuilder.MergeFrom(Voicemail);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Voicemail = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasGeneralDesc {
       get { return result.HasGeneralDesc; }
      }
      public global::PhoneNumbers.PhoneNumberDesc GeneralDesc {
        get { return result.GeneralDesc; }
        set { SetGeneralDesc(value); }
      }
      public Builder SetGeneralDesc(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasGeneralDesc = true;
        result.generalDesc_ = value;
        return this;
      }
      public Builder SetGeneralDesc(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasGeneralDesc = true;
        result.generalDesc_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGeneralDesc(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasGeneralDesc &&
            result.generalDesc_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.generalDesc_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.generalDesc_).MergeFrom(value).BuildPartial();
        } else {
          result.generalDesc_ = value;
        }
        result.hasGeneralDesc = true;
        return this;
      }
      public Builder ClearGeneralDesc() {
        result.hasGeneralDesc = false;
        result.generalDesc_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasFixedLine {
       get { return result.HasFixedLine; }
      }
      public global::PhoneNumbers.PhoneNumberDesc FixedLine {
        get { return result.FixedLine; }
        set { SetFixedLine(value); }
      }
      public Builder SetFixedLine(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasFixedLine = true;
        result.fixedLine_ = value;
        return this;
      }
      public Builder SetFixedLine(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasFixedLine = true;
        result.fixedLine_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFixedLine(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasFixedLine &&
            result.fixedLine_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.fixedLine_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.fixedLine_).MergeFrom(value).BuildPartial();
        } else {
          result.fixedLine_ = value;
        }
        result.hasFixedLine = true;
        return this;
      }
      public Builder ClearFixedLine() {
        result.hasFixedLine = false;
        result.fixedLine_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasMobile {
       get { return result.HasMobile; }
      }
      public global::PhoneNumbers.PhoneNumberDesc Mobile {
        get { return result.Mobile; }
        set { SetMobile(value); }
      }
      public Builder SetMobile(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasMobile = true;
        result.mobile_ = value;
        return this;
      }
      public Builder SetMobile(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasMobile = true;
        result.mobile_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMobile(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasMobile &&
            result.mobile_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.mobile_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.mobile_).MergeFrom(value).BuildPartial();
        } else {
          result.mobile_ = value;
        }
        result.hasMobile = true;
        return this;
      }
      public Builder ClearMobile() {
        result.hasMobile = false;
        result.mobile_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasTollFree {
       get { return result.HasTollFree; }
      }
      public global::PhoneNumbers.PhoneNumberDesc TollFree {
        get { return result.TollFree; }
        set { SetTollFree(value); }
      }
      public Builder SetTollFree(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTollFree = true;
        result.tollFree_ = value;
        return this;
      }
      public Builder SetTollFree(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasTollFree = true;
        result.tollFree_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTollFree(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasTollFree &&
            result.tollFree_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.tollFree_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.tollFree_).MergeFrom(value).BuildPartial();
        } else {
          result.tollFree_ = value;
        }
        result.hasTollFree = true;
        return this;
      }
      public Builder ClearTollFree() {
        result.hasTollFree = false;
        result.tollFree_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasPremiumRate {
       get { return result.HasPremiumRate; }
      }
      public global::PhoneNumbers.PhoneNumberDesc PremiumRate {
        get { return result.PremiumRate; }
        set { SetPremiumRate(value); }
      }
      public Builder SetPremiumRate(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPremiumRate = true;
        result.premiumRate_ = value;
        return this;
      }
      public Builder SetPremiumRate(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPremiumRate = true;
        result.premiumRate_ = builderForValue.Build();
        return this;
      }
      public Builder MergePremiumRate(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPremiumRate &&
            result.premiumRate_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.premiumRate_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.premiumRate_).MergeFrom(value).BuildPartial();
        } else {
          result.premiumRate_ = value;
        }
        result.hasPremiumRate = true;
        return this;
      }
      public Builder ClearPremiumRate() {
        result.hasPremiumRate = false;
        result.premiumRate_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasSharedCost {
       get { return result.HasSharedCost; }
      }
      public global::PhoneNumbers.PhoneNumberDesc SharedCost {
        get { return result.SharedCost; }
        set { SetSharedCost(value); }
      }
      public Builder SetSharedCost(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSharedCost = true;
        result.sharedCost_ = value;
        return this;
      }
      public Builder SetSharedCost(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasSharedCost = true;
        result.sharedCost_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSharedCost(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasSharedCost &&
            result.sharedCost_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.sharedCost_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.sharedCost_).MergeFrom(value).BuildPartial();
        } else {
          result.sharedCost_ = value;
        }
        result.hasSharedCost = true;
        return this;
      }
      public Builder ClearSharedCost() {
        result.hasSharedCost = false;
        result.sharedCost_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasPersonalNumber {
       get { return result.HasPersonalNumber; }
      }
      public global::PhoneNumbers.PhoneNumberDesc PersonalNumber {
        get { return result.PersonalNumber; }
        set { SetPersonalNumber(value); }
      }
      public Builder SetPersonalNumber(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPersonalNumber = true;
        result.personalNumber_ = value;
        return this;
      }
      public Builder SetPersonalNumber(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPersonalNumber = true;
        result.personalNumber_ = builderForValue.Build();
        return this;
      }
      public Builder MergePersonalNumber(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPersonalNumber &&
            result.personalNumber_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.personalNumber_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.personalNumber_).MergeFrom(value).BuildPartial();
        } else {
          result.personalNumber_ = value;
        }
        result.hasPersonalNumber = true;
        return this;
      }
      public Builder ClearPersonalNumber() {
        result.hasPersonalNumber = false;
        result.personalNumber_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasVoip {
       get { return result.HasVoip; }
      }
      public global::PhoneNumbers.PhoneNumberDesc Voip {
        get { return result.Voip; }
        set { SetVoip(value); }
      }
      public Builder SetVoip(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasVoip = true;
        result.voip_ = value;
        return this;
      }
      public Builder SetVoip(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasVoip = true;
        result.voip_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVoip(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasVoip &&
            result.voip_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.voip_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.voip_).MergeFrom(value).BuildPartial();
        } else {
          result.voip_ = value;
        }
        result.hasVoip = true;
        return this;
      }
      public Builder ClearVoip() {
        result.hasVoip = false;
        result.voip_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasPager {
       get { return result.HasPager; }
      }
      public global::PhoneNumbers.PhoneNumberDesc Pager {
        get { return result.Pager; }
        set { SetPager(value); }
      }
      public Builder SetPager(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPager = true;
        result.pager_ = value;
        return this;
      }
      public Builder SetPager(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasPager = true;
        result.pager_ = builderForValue.Build();
        return this;
      }
      public Builder MergePager(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasPager &&
            result.pager_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.pager_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.pager_).MergeFrom(value).BuildPartial();
        } else {
          result.pager_ = value;
        }
        result.hasPager = true;
        return this;
      }
      public Builder ClearPager() {
        result.hasPager = false;
        result.pager_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasUan {
       get { return result.HasUan; }
      }
      public global::PhoneNumbers.PhoneNumberDesc Uan {
        get { return result.Uan; }
        set { SetUan(value); }
      }
      public Builder SetUan(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasUan = true;
        result.uan_ = value;
        return this;
      }
      public Builder SetUan(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasUan = true;
        result.uan_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUan(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasUan &&
            result.uan_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.uan_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.uan_).MergeFrom(value).BuildPartial();
        } else {
          result.uan_ = value;
        }
        result.hasUan = true;
        return this;
      }
      public Builder ClearUan() {
        result.hasUan = false;
        result.uan_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasEmergency {
       get { return result.HasEmergency; }
      }
      public global::PhoneNumbers.PhoneNumberDesc Emergency {
        get { return result.Emergency; }
        set { SetEmergency(value); }
      }
      public Builder SetEmergency(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasEmergency = true;
        result.emergency_ = value;
        return this;
      }
      public Builder SetEmergency(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasEmergency = true;
        result.emergency_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEmergency(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasEmergency &&
            result.emergency_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.emergency_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.emergency_).MergeFrom(value).BuildPartial();
        } else {
          result.emergency_ = value;
        }
        result.hasEmergency = true;
        return this;
      }
      public Builder ClearEmergency() {
        result.hasEmergency = false;
        result.emergency_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasVoicemail {
       get { return result.HasVoicemail; }
      }
      public global::PhoneNumbers.PhoneNumberDesc Voicemail {
        get { return result.Voicemail; }
        set { SetVoicemail(value); }
      }
      public Builder SetVoicemail(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasVoicemail = true;
        result.voicemail_ = value;
        return this;
      }
      public Builder SetVoicemail(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasVoicemail = true;
        result.voicemail_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVoicemail(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasVoicemail &&
            result.voicemail_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.voicemail_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.voicemail_).MergeFrom(value).BuildPartial();
        } else {
          result.voicemail_ = value;
        }
        result.hasVoicemail = true;
        return this;
      }
      public Builder ClearVoicemail() {
        result.hasVoicemail = false;
        result.voicemail_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasNoInternationalDialling {
       get { return result.HasNoInternationalDialling; }
      }
      public global::PhoneNumbers.PhoneNumberDesc NoInternationalDialling {
        get { return result.NoInternationalDialling; }
        set { SetNoInternationalDialling(value); }
      }
      public Builder SetNoInternationalDialling(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasNoInternationalDialling = true;
        result.noInternationalDialling_ = value;
        return this;
      }
      public Builder SetNoInternationalDialling(global::PhoneNumbers.PhoneNumberDesc.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasNoInternationalDialling = true;
        result.noInternationalDialling_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNoInternationalDialling(global::PhoneNumbers.PhoneNumberDesc value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasNoInternationalDialling &&
            result.noInternationalDialling_ != global::PhoneNumbers.PhoneNumberDesc.DefaultInstance) {
            result.noInternationalDialling_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.noInternationalDialling_).MergeFrom(value).BuildPartial();
        } else {
          result.noInternationalDialling_ = value;
        }
        result.hasNoInternationalDialling = true;
        return this;
      }
      public Builder ClearNoInternationalDialling() {
        result.hasNoInternationalDialling = false;
        result.noInternationalDialling_ = global::PhoneNumbers.PhoneNumberDesc.DefaultInstance;
        return this;
      }
      
      public bool HasId {
        get { return result.HasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasCountryCode {
        get { return result.HasCountryCode; }
      }
      public int CountryCode {
        get { return result.CountryCode; }
        set { SetCountryCode(value); }
      }
      public Builder SetCountryCode(int value) {
        result.hasCountryCode = true;
        result.countryCode_ = value;
        return this;
      }
      public Builder ClearCountryCode() {
        result.hasCountryCode = false;
        result.countryCode_ = 0;
        return this;
      }
      
      public bool HasInternationalPrefix {
        get { return result.HasInternationalPrefix; }
      }
      public string InternationalPrefix {
        get { return result.InternationalPrefix; }
        set { SetInternationalPrefix(value); }
      }
      public Builder SetInternationalPrefix(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInternationalPrefix = true;
        result.internationalPrefix_ = value;
        return this;
      }
      public Builder ClearInternationalPrefix() {
        result.hasInternationalPrefix = false;
        result.internationalPrefix_ = "";
        return this;
      }
      
      public bool HasPreferredInternationalPrefix {
        get { return result.HasPreferredInternationalPrefix; }
      }
      public string PreferredInternationalPrefix {
        get { return result.PreferredInternationalPrefix; }
        set { SetPreferredInternationalPrefix(value); }
      }
      public Builder SetPreferredInternationalPrefix(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPreferredInternationalPrefix = true;
        result.preferredInternationalPrefix_ = value;
        return this;
      }
      public Builder ClearPreferredInternationalPrefix() {
        result.hasPreferredInternationalPrefix = false;
        result.preferredInternationalPrefix_ = "";
        return this;
      }
      
      public bool HasNationalPrefix {
        get { return result.HasNationalPrefix; }
      }
      public string NationalPrefix {
        get { return result.NationalPrefix; }
        set { SetNationalPrefix(value); }
      }
      public Builder SetNationalPrefix(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasNationalPrefix = true;
        result.nationalPrefix_ = value;
        return this;
      }
      public Builder ClearNationalPrefix() {
        result.hasNationalPrefix = false;
        result.nationalPrefix_ = "";
        return this;
      }
      
      public bool HasPreferredExtnPrefix {
        get { return result.HasPreferredExtnPrefix; }
      }
      public string PreferredExtnPrefix {
        get { return result.PreferredExtnPrefix; }
        set { SetPreferredExtnPrefix(value); }
      }
      public Builder SetPreferredExtnPrefix(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasPreferredExtnPrefix = true;
        result.preferredExtnPrefix_ = value;
        return this;
      }
      public Builder ClearPreferredExtnPrefix() {
        result.hasPreferredExtnPrefix = false;
        result.preferredExtnPrefix_ = "";
        return this;
      }
      
      public bool HasNationalPrefixForParsing {
        get { return result.HasNationalPrefixForParsing; }
      }
      public string NationalPrefixForParsing {
        get { return result.NationalPrefixForParsing; }
        set { SetNationalPrefixForParsing(value); }
      }
      public Builder SetNationalPrefixForParsing(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasNationalPrefixForParsing = true;
        result.nationalPrefixForParsing_ = value;
        return this;
      }
      public Builder ClearNationalPrefixForParsing() {
        result.hasNationalPrefixForParsing = false;
        result.nationalPrefixForParsing_ = "";
        return this;
      }
      
      public bool HasNationalPrefixTransformRule {
        get { return result.HasNationalPrefixTransformRule; }
      }
      public string NationalPrefixTransformRule {
        get { return result.NationalPrefixTransformRule; }
        set { SetNationalPrefixTransformRule(value); }
      }
      public Builder SetNationalPrefixTransformRule(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasNationalPrefixTransformRule = true;
        result.nationalPrefixTransformRule_ = value;
        return this;
      }
      public Builder ClearNationalPrefixTransformRule() {
        result.hasNationalPrefixTransformRule = false;
        result.nationalPrefixTransformRule_ = "";
        return this;
      }
      
      public bool HasSameMobileAndFixedLinePattern {
        get { return result.HasSameMobileAndFixedLinePattern; }
      }
      public bool SameMobileAndFixedLinePattern {
        get { return result.SameMobileAndFixedLinePattern; }
        set { SetSameMobileAndFixedLinePattern(value); }
      }
      public Builder SetSameMobileAndFixedLinePattern(bool value) {
        result.hasSameMobileAndFixedLinePattern = true;
        result.sameMobileAndFixedLinePattern_ = value;
        return this;
      }
      public Builder ClearSameMobileAndFixedLinePattern() {
        result.hasSameMobileAndFixedLinePattern = false;
        result.sameMobileAndFixedLinePattern_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::PhoneNumbers.NumberFormat> NumberFormatList {
        get { return result.numberFormat_; }
      }
      public int NumberFormatCount {
        get { return result.NumberFormatCount; }
      }
      public global::PhoneNumbers.NumberFormat GetNumberFormat(int index) {
        return result.GetNumberFormat(index);
      }
      public Builder SetNumberFormat(int index, global::PhoneNumbers.NumberFormat value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.numberFormat_[index] = value;
        return this;
      }
      public Builder SetNumberFormat(int index, global::PhoneNumbers.NumberFormat.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.numberFormat_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNumberFormat(global::PhoneNumbers.NumberFormat value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.numberFormat_.Add(value);
        return this;
      }
      public Builder AddNumberFormat(global::PhoneNumbers.NumberFormat.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.numberFormat_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNumberFormat(scg::IEnumerable<global::PhoneNumbers.NumberFormat> values) {
        base.AddRange(values, result.numberFormat_);
        return this;
      }
      public Builder ClearNumberFormat() {
        result.numberFormat_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::PhoneNumbers.NumberFormat> IntlNumberFormatList {
        get { return result.intlNumberFormat_; }
      }
      public int IntlNumberFormatCount {
        get { return result.IntlNumberFormatCount; }
      }
      public global::PhoneNumbers.NumberFormat GetIntlNumberFormat(int index) {
        return result.GetIntlNumberFormat(index);
      }
      public Builder SetIntlNumberFormat(int index, global::PhoneNumbers.NumberFormat value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.intlNumberFormat_[index] = value;
        return this;
      }
      public Builder SetIntlNumberFormat(int index, global::PhoneNumbers.NumberFormat.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.intlNumberFormat_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddIntlNumberFormat(global::PhoneNumbers.NumberFormat value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.intlNumberFormat_.Add(value);
        return this;
      }
      public Builder AddIntlNumberFormat(global::PhoneNumbers.NumberFormat.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.intlNumberFormat_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeIntlNumberFormat(scg::IEnumerable<global::PhoneNumbers.NumberFormat> values) {
        base.AddRange(values, result.intlNumberFormat_);
        return this;
      }
      public Builder ClearIntlNumberFormat() {
        result.intlNumberFormat_.Clear();
        return this;
      }
      
      public bool HasMainCountryForCode {
        get { return result.HasMainCountryForCode; }
      }
      public bool MainCountryForCode {
        get { return result.MainCountryForCode; }
        set { SetMainCountryForCode(value); }
      }
      public Builder SetMainCountryForCode(bool value) {
        result.hasMainCountryForCode = true;
        result.mainCountryForCode_ = value;
        return this;
      }
      public Builder ClearMainCountryForCode() {
        result.hasMainCountryForCode = false;
        result.mainCountryForCode_ = false;
        return this;
      }
      
      public bool HasLeadingDigits {
        get { return result.HasLeadingDigits; }
      }
      public string LeadingDigits {
        get { return result.LeadingDigits; }
        set { SetLeadingDigits(value); }
      }
      public Builder SetLeadingDigits(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasLeadingDigits = true;
        result.leadingDigits_ = value;
        return this;
      }
      public Builder ClearLeadingDigits() {
        result.hasLeadingDigits = false;
        result.leadingDigits_ = "";
        return this;
      }
      
      public bool HasLeadingZeroPossible {
        get { return result.HasLeadingZeroPossible; }
      }
      public bool LeadingZeroPossible {
        get { return result.LeadingZeroPossible; }
        set { SetLeadingZeroPossible(value); }
      }
      public Builder SetLeadingZeroPossible(bool value) {
        result.hasLeadingZeroPossible = true;
        result.leadingZeroPossible_ = value;
        return this;
      }
      public Builder ClearLeadingZeroPossible() {
        result.hasLeadingZeroPossible = false;
        result.leadingZeroPossible_ = false;
        return this;
      }
    }
    static PhoneMetadata() {
      object.ReferenceEquals(global::PhoneNumbers.Phonemetadata.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
  public sealed partial class PhoneMetadataCollection : pb::GeneratedMessageLite<PhoneMetadataCollection, PhoneMetadataCollection.Builder> {
    private static readonly PhoneMetadataCollection defaultInstance = new Builder().BuildPartial();
    public static PhoneMetadataCollection DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PhoneMetadataCollection DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override PhoneMetadataCollection ThisMessage {
      get { return this; }
    }
    
    public const int MetadataFieldNumber = 1;
    private pbc::PopsicleList<global::PhoneNumbers.PhoneMetadata> metadata_ = new pbc::PopsicleList<global::PhoneNumbers.PhoneMetadata>();
    public scg::IList<global::PhoneNumbers.PhoneMetadata> MetadataList {
      get { return metadata_; }
    }
    public int MetadataCount {
      get { return metadata_.Count; }
    }
    public global::PhoneNumbers.PhoneMetadata GetMetadata(int index) {
      return metadata_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::PhoneNumbers.PhoneMetadata element in MetadataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      int size = SerializedSize;
      foreach (global::PhoneNumbers.PhoneMetadata element in MetadataList) {
        output.WriteMessage(1, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::PhoneNumbers.PhoneMetadata element in MetadataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::PhoneNumbers.PhoneMetadata i in metadata_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PhoneMetadataCollection other = obj as PhoneMetadataCollection;
      if (other == null) return false;
      if(metadata_.Count != other.metadata_.Count) return false;
      for(int ix=0; ix < metadata_.Count; ix++)
        if(!metadata_[ix].Equals(other.metadata_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("metadata", metadata_, writer);
    }
    #endregion
    
    public static PhoneMetadataCollection ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PhoneMetadataCollection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PhoneMetadataCollection ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PhoneMetadataCollection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PhoneMetadataCollection ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PhoneMetadataCollection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PhoneMetadataCollection ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PhoneMetadataCollection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PhoneMetadataCollection ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PhoneMetadataCollection ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PhoneMetadataCollection prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
    public sealed partial class Builder : pb::GeneratedBuilderLite<PhoneMetadataCollection, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      PhoneMetadataCollection result = new PhoneMetadataCollection();
      
      protected override PhoneMetadataCollection MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new PhoneMetadataCollection();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override PhoneMetadataCollection DefaultInstanceForType {
        get { return global::PhoneNumbers.PhoneMetadataCollection.DefaultInstance; }
      }
      
      public override PhoneMetadataCollection BuildPartial() {
        if (result == null) {
          throw new global::System.InvalidOperationException("build() has already been called on this Builder");
        }
        result.metadata_.MakeReadOnly();
        PhoneMetadataCollection returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PhoneMetadataCollection) {
          return MergeFrom((PhoneMetadataCollection) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PhoneMetadataCollection other) {
        if (other == global::PhoneNumbers.PhoneMetadataCollection.DefaultInstance) return this;
        if (other.metadata_.Count != 0) {
          base.AddRange(other.metadata_, result.metadata_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::PhoneNumbers.PhoneMetadata.Builder subBuilder = global::PhoneNumbers.PhoneMetadata.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddMetadata(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public pbc::IPopsicleList<global::PhoneNumbers.PhoneMetadata> MetadataList {
        get { return result.metadata_; }
      }
      public int MetadataCount {
        get { return result.MetadataCount; }
      }
      public global::PhoneNumbers.PhoneMetadata GetMetadata(int index) {
        return result.GetMetadata(index);
      }
      public Builder SetMetadata(int index, global::PhoneNumbers.PhoneMetadata value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.metadata_[index] = value;
        return this;
      }
      public Builder SetMetadata(int index, global::PhoneNumbers.PhoneMetadata.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.metadata_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMetadata(global::PhoneNumbers.PhoneMetadata value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.metadata_.Add(value);
        return this;
      }
      public Builder AddMetadata(global::PhoneNumbers.PhoneMetadata.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.metadata_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMetadata(scg::IEnumerable<global::PhoneNumbers.PhoneMetadata> values) {
        base.AddRange(values, result.metadata_);
        return this;
      }
      public Builder ClearMetadata() {
        result.metadata_.Clear();
        return this;
      }
    }
    static PhoneMetadataCollection() {
      object.ReferenceEquals(global::PhoneNumbers.Phonemetadata.Descriptor, null);
    }
  }
  
  #endregion
  
}
